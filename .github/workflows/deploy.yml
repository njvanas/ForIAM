name: Deploy + Coverage + Docker

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: iam
          POSTGRES_PASSWORD: iam
          POSTGRES_DB: iam
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install backend dependencies
      working-directory: ./backend
      run: go mod tidy

    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Upload Go coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.out
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test

    - name: Run frontend build
      working-directory: ./frontend
      run: npm run build

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "version=v$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        else
          echo "version=dev-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        fi

  docker:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      if: github.event_name != 'pull_request'
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build and Push Backend
      if: github.event_name != 'pull_request'
      run: |
        docker build -t foriam-backend:${{ needs.test-and-build.outputs.version }} ./backend
        docker build -t foriam-backend:latest ./backend
        docker push foriam-backend:${{ needs.test-and-build.outputs.version }}
        docker push foriam-backend:latest

    - name: Build and Push Frontend
      if: github.event_name != 'pull_request'
      run: |
        docker build -t foriam-frontend:${{ needs.test-and-build.outputs.version }} ./frontend
        docker build -t foriam-frontend:latest ./frontend
        docker push foriam-frontend:${{ needs.test-and-build.outputs.version }}
        docker push foriam-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build, docker]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
      run: |
        echo "Deploying version ${{ needs.test-and-build.outputs.version }} to ${{ github.event.inputs.environment || 'staging' }}"
        echo "This would typically:"
        echo "1. Update Kubernetes manifests with new image tags"
        echo "2. Apply manifests to the target cluster"
        echo "3. Wait for rollout to complete"
        echo "4. Run smoke tests"
        
        # Example deployment commands (uncomment when ready):
        # kubectl set image deployment/backend backend=foriam/backend:${{ needs.test-and-build.outputs.version }}
        # kubectl set image deployment/frontend frontend=foriam/frontend:${{ needs.test-and-build.outputs.version }}
        # kubectl rollout status deployment/backend
        # kubectl rollout status deployment/frontend
