name: Deploy + Coverage + Docker

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: iam
          POSTGRES_PASSWORD: iam
          POSTGRES_DB: iam
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install backend dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run backend tests with coverage
      working-directory: ./backend
      env:
        DB_URL: postgres://iam:iam@localhost:5432/iam?sslmode=disable
        REDIS_URL: localhost:6379
        JWT_SECRET: test-secret
        ENV: test
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Upload Go coverage to Codecov
      if: env.CODECOV_TOKEN != ''
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.out
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: backend

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test

    - name: Run frontend build
      working-directory: ./frontend
      run: npm run build

  docker:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          foriam/backend:${{ needs.test-and-build.outputs.version }}
          foriam/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          foriam/frontend:${{ needs.test-and-build.outputs.version }}
          foriam/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build, docker]
    if: always() && needs.test-and-build.result == 'success'
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Deploy notification
      run: |
        echo "Deploying version ${{ needs.test-and-build.outputs.version }} to ${{ github.event.inputs.environment || 'staging' }}"
        echo "This is where you would deploy to your infrastructure"
        echo "Examples:"
        echo "- Update Kubernetes deployments"
        echo "- Deploy to cloud platforms"
        echo "- Update configuration"